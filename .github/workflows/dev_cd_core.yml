name: CI on DEV core

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened
    paths:
      - 'src/core/**'
      - '.github/workflows/dev**'

permissions:
  id-token: write
  contents: read

env:
  DIR: "src/core"
  AWS_ENVIRONMENT: dev

jobs:

  create_runner:
    name: Create Runner
    runs-on: ubuntu-22.04
    environment: dev-runner
    outputs:
      runner_name: ${{ steps.create_github_runner.outputs.runner_name }}
    steps:
      - name: Create GitHub Runner
        id: create_github_runner
        # from https://github.com/pagopa/github-self-hosted-runner-azure-create-action/commits/main
        uses: pagopa/interop-github-runner-aws-create-action@main
        with:
          aws_region: ${{ secrets.AWS_REGION }}
          iam_role_arn: ${{ secrets.ECS_IAM_ROLE_ARN }}
          ecs_cluster_name: ${{ secrets.ECS_CLUSTER_NAME }}
          ecs_task_definition: ${{ secrets.TASK_DEFINITION }}
          ecs_container_name: github-runner
          ecs_task_subnet_id: ${{ secrets.SUBNET_ID }}
          ecs_task_sec_group: ${{ secrets.SEC_GROUP_ID }}
          pat_token: ${{ secrets.BOT_TOKEN }}
      - name: testpre
        id: testpre
        shell: bash
        run: |
          MYTEST="something"
          # echo "::set-output name=mytest::${MYTEST}"
          echo "MYTEST=${MYTEST}" >> $GITHUB_OUTPUT
      - name: test
        id: test
        shell: bash
        run: |
          echo ${{ steps.testpre.outputs.mytest }}
          echo ${{ steps.testpre.outputs.MYTEST }}
          echo "${{ steps.testpre.outputs.mytest }}"
          echo "${{ steps.testpre.outputs.MYTEST }}"

  terraform_plan_job:
    name: Terraform Plan
    # runs-on: [self-hosted, "${{ needs.create_runner.outputs.runner_name }}"]
    runs-on: [self-hosted]
    environment: dev-ci
    needs: create_runner
    steps:
      - name: Checkout
        id: checkout
        # from https://github.com/actions/checkout/commits/main
        uses: actions/checkout@1f9a0c22da41e6ebfa534300ef656657ea2c6707
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup terraform
        id: setup-version
        # https://github.com/pagopa/terraform-install-action/commits/main
        uses: pagopa/eng-github-actions-iac-template/terraform/terraform-install-action@main

      - name: Terraform plan
        # from https://github.com/pagopa/terraform-plan-azure-action/commits/main
        uses: pagopa/eng-github-actions-iac-template/aws/terraform-plan-aws-action@main
        with:
          iam_role: ${{ secrets.AWS_IAM_ROLE_READ_ONLY }}
          aws_region: ${{ secrets.AWS_REGION }}
          dir: ${{ env.DIR }}
          aws_environment: ${{ env.AWS_ENVIRONMENT }}

  cleanup_runner:
    name: Cleanup Runner
    if: always()
    runs-on: ubuntu-22.04
    environment: dev-runner
    needs: [create_runner, terraform_plan_job]
    steps:
      - name: Cleanup GitHub Runner
        id: cleanup_github_runner
        # from https://github.com/pagopa/github-self-hosted-runner-azure-cleanup-action/commits/main
        uses: pagopa/interop-github-runner-aws-cleanup-action@main
        with:
          aws_region: ${{ secrets.AWS_REGION }}
          iam_role_arn: ${{ secrets.ECS_IAM_ROLE_ARN }}
          ecs_cluster_name: ${{ secrets.ECS_CLUSTER_NAME }}
          pat_token: ${{ secrets.BOT_TOKEN }}


  # create_runner:
  #   name: Create Self-Hosted Runner
  #   runs-on: ubuntu-22.04
  #   environment: dev

  #   steps:
  #     - name: Start GitHub Runner
  #       id: start_runner
  #       uses: pagopa/interop-github-runner-aws-create-action@main
  #       with:
  #         aws_region: ${{ secrets.AWS_REGION }}
  #         iam_role_arn: ${{ secrets.ECS_IAM_ROLE_ARN }}
  #         ecs_cluster_name: ${{ secrets.ECS_CLUSTER_NAME }}
  #         ecs_task_definition: ${{ secrets.TASK_DEFINITION }}
  #         ecs_container_name: github-runner
  #         ecs_task_subnet_id: ${{ secrets.SUBNET_ID }}
  #         ecs_task_sec_group: ${{ secrets.SEC_GROUP_ID }}
  #         pat_token: ${{ secrets.BOT_TOKEN }}



  # delete_runner:
  #   name: Delete Self-Hosted Runner
  #   needs: [create_runner, deploy_ingress,
  #     deploy_agreement_management, deploy_agreement_process,
  #     deploy_attribute_registry_management, deploy_attribute_registry_process,
  #     deploy_authorization_management, deploy_authorization_process,
  #     deploy_catalog_management, deploy_catalog_process,
  #     deploy_party_registry_proxy,
  #     deploy_purpose_management, deploy_purpose_process,
  #     deploy_tenant_management, deploy_tenant_process,
  #     deploy_notifier,
  #     deploy_attributes_loader, deploy_token_details_persister,
  #     deploy_tenants_certified_attributes_updater, deploy_party_registry_proxy_refresher,
  #     deploy_metrics_report_generator, deploy_padigitale_report_generator,
  #     deploy_dashboard_metrics_report_generator, deploy_dtd_catalog_exporter,
  #     deploy_privacy_notices_updater,
  #     deploy_redis,
  #     deploy_smtp_mock
  #   ]
  #   if: ${{ always() && needs.create_runner.result != 'skipped' }}
  #   runs-on: ubuntu-22.04
  #   strategy:
  #     matrix:
  #       index: [1, 2, 3, 4, 5]
  #     fail-fast: true
  #   environment: ${{ inputs.environment }}
  #   permissions:
  #     contents: read
  #     id-token: write

  #   steps:
  #     - name: Stop Github Runner
  #       id: stop_runner
  #       uses: pagopa/interop-github-runner-aws-cleanup-action@main
  #       with:
  #         aws_region: ${{ secrets.AWS_REGION }}
  #         iam_role_arn: ${{ secrets.ECS_IAM_ROLE_ARN }}
  #         ecs_cluster_name: ${{ secrets.ECS_CLUSTER_NAME }}
  #         pat_token: ${{ secrets.BOT_TOKEN }}
